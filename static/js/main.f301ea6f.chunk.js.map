{"version":3,"sources":["../../src/components/Stepper.tsx","../../src/components/Steps.tsx","../../src/components/FieldRenderer.tsx","../../src/components/Step.tsx","../../src/components/Wizard.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Stepper","steps","currentStep","setCurrentStep","className","key","step","name","stepIndex","isCurrentStep","onClick","Steps","children","useFormikContext","submitCount","errors","React","FieldRenderer","_field","field","customFields","values","dependentFieldId","dependentFieldValue","shouldRenderField","id","form","htmlFor","options","customField","onChange","e","value","placeholder","option","renderField","Step","section","App","props","completedSteps","validations","setValidations","wizard","serializedValidations","transformAll","initialValues","getInitialValues","onSubmit","validationSchema","i","type","onComplete","CustomDateInput","onDayChange","setFieldValue","settings","disableNextUntilValid","disableSubmitUntilValid","useSections","sections","fields","label","initialValue","required","show","when","is","gte","validation","first_name","console","log","date","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f301ea6f.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { IStep } from '../types/wizard.types'\n\ninterface StepperProps {\n  steps: IStep[]\n  currentStep: number\n  completedSteps: any\n  setCurrentStep: (index: number) => void\n}\n\nconst Stepper = ({ steps, currentStep, setCurrentStep }: StepperProps) => {\n  const isCurrentStep = (stepIndex: number) => currentStep === stepIndex\n\n  return (\n    <div className='tabs'>\n      <ul>\n        {steps.map((step, i) => (\n          <li key={step.name} className={isCurrentStep(i) ? 'is-active' : ''}>\n            <a onClick={() => setCurrentStep(i)}>{step.name}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Stepper\n","import { useFormikContext } from 'formik'\nimport React from 'react'\n\nconst Steps = ({ currentStep, children }: any) => {\n  const { submitCount, errors } = useFormikContext()\n  return (\n    <div>\n      <div>{children[currentStep]}</div>\n      {submitCount > 0 && errors && (\n        <div className='notification is-danger m-4'>\n          The form has errors, Please correct them and retry submitting.\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Steps\n","import React from 'react'\nimport { Field, useFormikContext } from 'formik'\n// eslint-disable-next-line no-unused-vars\nimport { IField, ISection, IStep } from '../types/wizard.types'\n\ninterface FieldRendererProps {\n  step: IStep\n  field: IField\n  section: ISection\n  customFields?: any\n}\n\nconst FieldRenderer = ({ field: _field, customFields }: FieldRendererProps) => {\n  const { errors, values } = useFormikContext()\n\n  const renderField = (\n    type: string,\n    id: string,\n    options: { label: string; value: string }[] = [],\n    { field, form }: any\n  ) => {\n    if (customFields && customFields[type]) {\n      const customField = customFields[type]\n      return <customField.component field={field} form={form} />\n    }\n\n    switch (type) {\n      case 'number':\n      case 'date':\n      case 'text':\n        return (\n          <input\n            {...field}\n            onChange={(e) => form.setFieldValue(field.name, e.target.value)}\n            className={errors && errors[id] ? 'input is-danger' : 'input'}\n            id={id}\n          />\n        )\n      case 'textarea':\n        return (\n          <textarea\n            {...field}\n            id={id}\n            className={errors && errors[id] ? 'textarea is-danger' : 'textarea'}\n          />\n        )\n      case 'select':\n        return (\n          <select\n            value={field.value}\n            placeholder={field.placeholder}\n            onChange={(e) => form.setFieldValue(field.name, e.target.value)}\n            className={errors && errors[id] ? 'select is-danger' : 'select'}\n            id={id}\n          >\n            {options.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        )\n      default:\n        return (\n          <p>\n            No field defined {field.type} for this control {field.name}\n          </p>\n        )\n    }\n  }\n  const shouldRenderField = () => {\n    if (_field.show) {\n      const dependentFieldId = _field.show.when\n      if (dependentFieldId) {\n        const dependentFieldValue =\n          // @ts-ignore\n          values[dependentFieldId]\n\n        if (_field.show.is) {\n          return dependentFieldValue === _field.show.is\n        }\n        if (_field.show.gte && _field.show.lte) {\n          return (\n            dependentFieldValue >= _field.show.gte &&\n            dependentFieldValue <= _field.show.lte\n          )\n        }\n        if (_field.show.gt && _field.show.lt) {\n          return (\n            dependentFieldValue > _field.show.gt &&\n            dependentFieldValue < _field.show.lt\n          )\n        }\n        if (_field.show.gte) {\n          return dependentFieldValue >= _field.show.gte\n        }\n        if (_field.show.gt) {\n          return dependentFieldValue > _field.show.gt\n        }\n        if (_field.show.lt) {\n          return dependentFieldValue < _field.show.lt\n        }\n        if (_field.show.lte) {\n          return dependentFieldValue <= _field.show.lte\n        }\n        if (_field.show.contains) {\n          return dependentFieldValue.includes(_field.show.contains)\n        }\n      }\n      return false\n    }\n    return true\n  }\n  return (\n    shouldRenderField() && (\n      <Field name={_field.id}>\n        {({ field, form }: any) => (\n          <div className='field'>\n            <label className='label' htmlFor={_field.id}>\n              {_field.label}\n            </label>\n            {renderField(_field.type, _field.id, _field.options, {\n              field,\n              form\n            })}\n            <p className='help is-danger'>{errors && errors[_field.id]}</p>\n          </div>\n        )}\n      </Field>\n    )\n  )\n}\n\nexport default FieldRenderer\n","import React from 'react'\n// eslint-disable-next-line no-unused-vars\nimport { IStep } from '../types/wizard.types'\nimport FieldRenderer from './FieldRenderer'\n\ninterface StepProps {\n  step: IStep\n  customFields: any\n}\n\nconst Step = ({ step, customFields }: StepProps) => {\n  return (\n    <div>\n      {step.sections.map((section) => {\n        return (\n          <div key={step.id} className='panel'>\n            <p className='panel-heading'>{section.name}</p>\n            <div className='p-2'>\n              {section.fields.map((field) => (\n                <FieldRenderer\n                  field={field}\n                  step={step}\n                  section={section}\n                  key={field.id}\n                  customFields={customFields}\n                />\n              ))}\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Step\n","import React from 'react'\nimport Stepper from './Stepper'\nimport Steps from './Steps'\nimport Step from './Step'\nimport { Form, Formik } from 'formik'\n// eslint-disable-next-line no-unused-vars\nimport { IWizard as WizardType } from '../types/wizard.types'\nimport { transformAll } from '@demvsystems/yup-ast'\n\ninterface WizardProps {\n  wizard: WizardType\n  onComplete: (values: any) => any\n  customFields?: any\n}\nexport default function App(props: WizardProps) {\n  const [currentStep, setCurrentStep] = React.useState(0)\n  const [completedSteps] = React.useState({})\n  const [validations, setValidations] = React.useState()\n  const { wizard } = props\n\n  React.useEffect(() => {\n    if (wizard.validation) {\n      const serializedValidations = transformAll(wizard.validation)\n      setValidations(serializedValidations)\n    }\n  }, [wizard.validation])\n\n  const getInitialValues = () => {\n    const initialValues = {}\n    wizard.steps.forEach((step) => {\n      return step.sections.forEach((section) => {\n        section.fields.forEach((field) => {\n          initialValues[field.id] = field.initialValue || ''\n        })\n      })\n    })\n    return initialValues\n  }\n  return (\n    <div>\n      <Stepper\n        currentStep={currentStep}\n        steps={wizard.steps}\n        completedSteps={completedSteps}\n        setCurrentStep={setCurrentStep}\n      />\n      <Formik\n        initialValues={getInitialValues()}\n        onSubmit={(values) => props.onComplete(values)}\n        validationSchema={validations}\n      >\n        <Form>\n          <div className='mb-4'>\n            <Steps currentStep={currentStep}>\n              {wizard.steps.map((step, i) => (\n                <Step step={step} key={i} customFields={props.customFields} />\n              ))}\n            </Steps>\n          </div>\n          <div className='is-flex is-justify-content-flex-end'>\n            {currentStep !== 0 && (\n              <button\n                onClick={(e) => {\n                  e.preventDefault()\n                  setCurrentStep(currentStep === 0 ? 0 : currentStep - 1)\n                }}\n                className='button mr-2'\n              >\n                Previous\n              </button>\n            )}\n            {currentStep === wizard.steps.length - 1 ? (\n              <button type='submit' className='button'>\n                Save\n              </button>\n            ) : (\n              <button\n                className='button'\n                onClick={(e) => {\n                  e.preventDefault()\n                  setCurrentStep(\n                    currentStep === wizard.steps.length - 1\n                      ? 0\n                      : currentStep + 1\n                  )\n                }}\n              >\n                Next\n              </button>\n            )}\n          </div>\n        </Form>\n      </Formik>\n    </div>\n  )\n}\n","import React from 'react'\nimport Wizard from './components/Wizard'\n// eslint-disable-next-line no-unused-vars\nimport { IWizard } from './types/wizard.types'\nimport './styles.module.css'\n\ninterface LibProps {\n  wizard: IWizard\n  onComplete: (values: any) => any\n  customFields?: any\n}\n\nconst Lib = ({ wizard, onComplete, customFields = {} }: LibProps) => {\n  return (\n    <Wizard\n      wizard={wizard}\n      onComplete={onComplete}\n      customFields={customFields}\n    />\n  )\n}\n\nexport default Lib\n","import React from 'react'\nimport DayPickerInput from 'react-day-picker/DayPickerInput'\nimport Wizard from 'react-formik-wizard'\nimport 'react-formik-wizard/dist/index.css'\nimport 'react-day-picker/lib/style.css'\n\nconst CustomDateInput = ({ form, field }: any) => {\n  return (\n    <div>\n      <DayPickerInput\n        onDayChange={(e) => form.setFieldValue(field.name, e)}\n        value={field.value}\n      />\n    </div>\n  )\n}\n\nconst App = () => {\n  const wizard = {\n    name: 'JSON Wizard',\n    settings: {\n      disableNextUntilValid: true,\n      disableSubmitUntilValid: true,\n      useSections: true\n    },\n    steps: [\n      {\n        name: 'Personal Info',\n        id: 'personal_info',\n        sections: [\n          {\n            name: 'Biodata',\n            id: 'biodata',\n            fields: [\n              {\n                label: 'First Name',\n                id: 'first_name',\n                type: 'text',\n                initialValue: 'Zeinab'\n              },\n              {\n                label: 'Last Name',\n                id: 'last_name',\n                type: 'text',\n                required: true\n              },\n              {\n                label: 'Date of Birth',\n                id: 'dob',\n                type: 'date',\n                initialValue: '2020-01-01',\n                required: true\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Education',\n        id: 'education',\n        sections: [\n          {\n            name: 'High School',\n            id: 'education',\n            fields: [\n              {\n                label: 'Highest level of education',\n                id: 'highest_education',\n                type: 'select',\n                options: [\n                  {\n                    label: 'University',\n                    value: 'university'\n                  },\n                  {\n                    label: 'High school',\n                    value: 'highschool'\n                  }\n                ]\n              },\n              {\n                label: 'Name',\n                id: 'highschool_name',\n                type: 'text',\n                required: true,\n                show: {\n                  when: 'highest_education',\n                  is: 'highschool'\n                }\n              },\n              {\n                label: 'GPA',\n                id: 'highschool_gpa',\n                type: 'number',\n                required: true\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Medical',\n        id: 'medical',\n        sections: [\n          {\n            name: 'Current conditions',\n            id: 'current_conditions',\n            fields: [\n              {\n                label: 'Do you have any current conditions?',\n                id: 'current_conditions_available',\n                type: 'select',\n                options: [\n                  { value: 'yes', label: 'Yes' },\n                  { value: 'no', label: 'No' }\n                ],\n                required: true\n              },\n              {\n                label: 'If yes, list all conditions you have',\n                id: 'all_conditions',\n                type: 'select',\n                options: [\n                  { value: '1', label: 'Diabetes' },\n                  { value: '2', label: 'HBP' }\n                ],\n                required: true,\n                show: {\n                  when: 'current_conditions_available',\n                  is: 'yes'\n                }\n              },\n              {\n                label: 'Glucose reading',\n                id: 'glucose',\n                type: 'number',\n                required: true,\n                show: {\n                  when: 'all_conditions',\n                  is: '1'\n                }\n              },\n              {\n                label: 'Blood pressure reading',\n                id: 'bp',\n                type: 'number',\n                required: true,\n                show: {\n                  when: 'glucose',\n                  gte: '7'\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    validation: [\n      ['yup.object'],\n      [\n        'yup.shape',\n        {\n          first_name: [\n            ['yup.string'],\n            ['yup.required', 'first name is required'],\n            ['yup.max', '5', 'only 5 chars allowed']\n          ]\n        }\n      ]\n    ]\n  }\n\n  const onComplete = (values: any) => {\n    console.log(values)\n  }\n\n  return (\n    <Wizard\n      wizard={wizard}\n      onComplete={onComplete}\n      customFields={{\n        date: {\n          component: CustomDateInput\n        }\n      }}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}