{"version":3,"sources":["../../src/components/Stepper.tsx","../../src/components/Steps.tsx","../../src/components/FieldRenderer.tsx","../../src/components/Step.tsx","../../src/components/Wizard.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Stepper","setCurrentStep","isCurrentStep","stepIndex","currentStep","toggleBackgroundColor","completedSteps","isCompletedStep","style","display","height","steps","key","step","name","alignItems","width","borderRight","borderLeft","backgroundColor","transition","borderRadius","borderWidth","borderColor","outline","color","onClick","i","Steps","children","React","FieldRenderer","field","setFieldValue","useFormikContext","label","id","formikField","value","initialState","type","options","mapOptionToString","option","onChange","date","renderField","Step","section","App","props","wizard","initialValues","personal_info","first_name","onSubmit","values","span","shape","SHAPE","pill","onComplete","engine","theme","LightTheme","settings","disableNextUntilValid","disableSubmitUntilValid","useSections","sections","fields","required","validations","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c91335c.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { Step } from '../types/wizard.types'\n\ninterface StepperProps {\n  steps: Step[]\n  currentStep: number\n  completedSteps: any\n  setCurrentStep: (index: number) => void\n}\n\nconst Stepper = ({\n  steps,\n  currentStep,\n  completedSteps,\n  setCurrentStep\n}: StepperProps) => {\n  const isCurrentStep = (stepIndex: number) => currentStep === stepIndex\n\n  const isCompletedStep = (stepIndex: number) => completedSteps[stepIndex]\n\n  const toggleBackgroundColor = (stepIndex: number) => {\n    if (isCompletedStep(stepIndex)) {\n      return 'green'\n    }\n    if (isCurrentStep(stepIndex) || currentStep > stepIndex) {\n      return 'black'\n    }\n    return 'lightgrey'\n  }\n\n  return (\n    <div style={{ display: 'flex', height: '40px' }}>\n      {steps.map((step, i) => (\n        <div key={step.name} style={{ display: 'flex', alignItems: 'center' }}>\n          {!!i && (\n            <div\n              style={{\n                width: '120px',\n                height: '1px',\n                borderRight: 0,\n                borderLeft: 0,\n                backgroundColor: toggleBackgroundColor(i),\n                transition: '0.3s linear background-color'\n              }}\n            />\n          )}\n          <button\n            style={{\n              borderRadius: '50%',\n              backgroundColor:\n                isCurrentStep(i) || currentStep > i ? 'black' : 'white',\n              width: isCurrentStep(i) ? '60px' : '40px',\n              height: isCurrentStep(i) ? '60px' : '40px',\n              borderWidth: isCurrentStep(i) ? '3px' : '1px',\n              borderColor: 'white',\n              outline: 'none',\n              color: isCurrentStep(i) || currentStep > i ? 'white' : 'black',\n              transition: '.1s ease height'\n            }}\n            onClick={() => setCurrentStep(i)}\n          >\n            {i + 1}\n          </button>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Stepper\n","import React from 'react'\n\nconst Steps = ({ currentStep, children }: any) => {\n  return <div>{children[currentStep]}</div>\n}\n\nexport default Steps\n","import React from 'react'\nimport { FormControl } from 'baseui/form-control'\nimport { StatefulInput } from 'baseui/input'\nimport { Combobox } from 'baseui/combobox'\nimport { DatePicker } from 'baseui/datepicker'\nimport { Field, useFormikContext } from 'formik'\n// eslint-disable-next-line no-unused-vars\nimport { Field as IField, Step } from '../types/wizard.types'\n\ninterface FieldRendererProps {\n  step: Step\n  field: IField\n}\n\nconst FieldRenderer = ({ step, field }: FieldRendererProps) => {\n  const { setFieldValue } = useFormikContext()\n  const renderField = (field: any) => {\n    switch (field.type) {\n      case 'text':\n        return (\n          <StatefulInput\n            {...field}\n            value='hello'\n            initialState={{ value: field.value }}\n          />\n        )\n      case 'number':\n        return <StatefulInput type='number' {...field} />\n      case 'combobox':\n        return (\n          <Combobox\n            options={field.options}\n            mapOptionToString={(option) => option.label}\n            {...field}\n          />\n        )\n      case 'date':\n        return (\n          <DatePicker\n            value={field.value}\n            onChange={({ date }) => setFieldValue(field.name, date)}\n          />\n        )\n      default:\n        return <StatefulInput {...field} />\n    }\n  }\n  return (\n    <FormControl label={() => field.label}>\n      <Field name={`${step.id}.${field.id}`}>\n        {({ field: formikField }: any) =>\n          renderField({ ...field, ...formikField })\n        }\n      </Field>\n    </FormControl>\n  )\n}\n\nexport default FieldRenderer\n","import React from 'react'\nimport { Step } from '../types/wizard.types'\nimport FieldRenderer from './FieldRenderer'\n\ninterface StepProps {\n  step: Step\n}\n\nconst Step = ({ step }: StepProps) => {\n  return (\n    <div>\n      <h2>{step.name}</h2>\n      <div>\n        {step.sections.map((section) => {\n          return (\n            <div key={step.id}>\n              <h3>{section.name}</h3>\n              {section.fields.map((field) => (\n                <FieldRenderer field={field} step={step} key={field.id} />\n              ))}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Step\n","import React from 'react'\nimport Stepper from './Stepper'\nimport Steps from './Steps'\nimport Step from './Step'\nimport { Button, SHAPE } from 'baseui/button'\nimport { Grid, Cell } from 'baseui/layout-grid'\nimport { Form, Formik } from 'formik'\n// eslint-disable-next-line no-unused-vars\nimport Wizard from '../types/wizard.types'\n\ninterface WizardProps {\n  wizard: Wizard\n  onComplete: (values: any) => any\n}\nexport default function App(props: WizardProps) {\n  const [currentStep, setCurrentStep] = React.useState(0)\n  const [completedSteps] = React.useState({})\n  const { wizard } = props\n  return (\n    <div>\n      <h1>{wizard.name}</h1>\n      <Stepper\n        currentStep={currentStep}\n        steps={wizard.steps}\n        completedSteps={completedSteps}\n        setCurrentStep={setCurrentStep}\n      />\n      <Formik\n        initialValues={{\n          personal_info: {\n            first_name: 'hello'\n          }\n        }}\n        onSubmit={(values) => props.onComplete(values)}\n      >\n        <Form>\n          <Steps currentStep={currentStep}>\n            {wizard.steps.map((step, i) => (\n              <Step step={step} key={i} />\n            ))}\n          </Steps>\n          <Grid>\n            <Cell span={[3, 3, 3]}>\n              {currentStep !== 0 && (\n                <Button\n                  onClick={() =>\n                    setCurrentStep(currentStep === 0 ? 0 : currentStep - 1)\n                  }\n                  shape={SHAPE.pill}\n                >\n                  Previous\n                </Button>\n              )}\n            </Cell>\n            <Cell span={[1, 4, 3]}>\n              {currentStep === wizard.steps.length - 1 ? (\n                <Button shape={SHAPE.pill} type='submit'>\n                  Save\n                </Button>\n              ) : (\n                <Button\n                  shape={SHAPE.pill}\n                  onClick={() =>\n                    setCurrentStep(\n                      currentStep === wizard.steps.length - 1\n                        ? 0\n                        : currentStep + 1\n                    )\n                  }\n                >\n                  Next\n                </Button>\n              )}\n            </Cell>\n          </Grid>\n        </Form>\n      </Formik>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as StyletronProvider } from 'styletron-react'\nimport { LightTheme, BaseProvider } from 'baseui'\nimport Wizard from './components/Wizard'\n// eslint-disable-next-line no-unused-vars\nimport IWizard from './types/wizard.types'\n\ninterface LibProps {\n  wizard: IWizard\n  onComplete: (values: any) => any\n}\n\nconst Lib = ({ wizard, onComplete }: LibProps) => {\n  const engine = new Styletron()\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Wizard wizard={wizard} onComplete={onComplete} />\n      </BaseProvider>\n    </StyletronProvider>\n  )\n}\n\nexport default Lib\n","import React from 'react'\nimport Wizard from 'react-formik-wizard'\nimport 'react-formik-wizard/dist/index.css'\n\nconst App = () => {\n  const wizard = {\n    name: 'JSON Wizard',\n    settings: {\n      disableNextUntilValid: true,\n      disableSubmitUntilValid: true,\n      useSections: true\n    },\n    steps: [\n      {\n        name: 'Personal Info',\n        id: 'personal_info',\n        sections: [\n          {\n            name: 'Biodata',\n            fields: [\n              {\n                label: 'First Name',\n                id: 'first_name',\n                type: 'text',\n                required: true\n              },\n              {\n                label: 'Last Name',\n                id: 'last_name',\n                type: 'text',\n                required: true\n              },\n              {\n                label: 'Date of Birth',\n                id: 'dob',\n                type: 'date',\n                required: true\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Education',\n        id: 'education',\n        sections: [\n          {\n            name: 'High School',\n            fields: [\n              {\n                label: 'Name',\n                id: 'highschool_name',\n                type: 'text',\n                required: true\n              },\n              {\n                label: 'GPA',\n                id: 'highschool_gpa',\n                type: 'number',\n                required: true\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Medical',\n        id: 'medical',\n        sections: [\n          {\n            name: 'Current conditions',\n            fields: [\n              {\n                label: 'Do you have any current conditions?',\n                id: 'current_conditions_available',\n                type: 'select',\n                options: [\n                  { id: '1', label: 'Yes' },\n                  { id: '2', label: 'No' }\n                ],\n                required: true\n              },\n              {\n                label: 'If yes, list all conditions you have',\n                id: 'all_conditions',\n                type: 'combobox',\n                options: [\n                  { id: '1', label: 'Diabetes' },\n                  { id: '2', label: 'HBP' }\n                ],\n                required: true\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    validations: {},\n  }\n\n  const onComplete = (values: any) => {\n    console.log(values)\n  }\n  \n  return <Wizard wizard={wizard} onComplete={onComplete}/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}